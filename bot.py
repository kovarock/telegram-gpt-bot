
import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)
from openai import OpenAI

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# GPT-–∫–ª—ñ—î–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)

# –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ñ–∞—Ä—Ç", "–§—ñ–ª–æ—Å–æ—Ñ", "–ü–æ—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ñ—à–µ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø GPT-–±–æ—Ç. –ù–∞–ø–∏—à–∏ —â–æ—Å—å ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º ü§ñ", reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –¥–∞–º –≤—ñ–¥–ø–æ–≤—ñ–¥—å. "
        "–ú–æ–∂–µ—à —Ç–∞–∫–æ–∂ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏, —â–æ–± –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Å—Ç–∏–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n"
        "- –ñ–∞—Ä—Ç üÉè\n- –§—ñ–ª–æ—Å–æ—Ñ ü§î\n- –ü–æ—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ñ—à–µ üë∂"
    )

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip().lower()

    # –ó–º—ñ–Ω–∞ —Ä–µ–∂–∏–º—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏
    if user_message in ["–∂–∞—Ä—Ç", "–∂–∞—Ä—Ç—ñ–≤–Ω–∏–∫"]:
        context.user_data["mode"] = "–∂–∞—Ä—Ç—ñ–≤–Ω–∏–∫"
        await update.message.reply_text("–†–µ–∂–∏–º: –ñ–∞—Ä—Ç—ñ–≤–Ω–∏–∫ —É–≤—ñ–º–∫–Ω–µ–Ω–æ üòÑ")
        return
    elif user_message in ["—Ñ—ñ–ª–æ—Å–æ—Ñ"]:
        context.user_data["mode"] = "—Ñ—ñ–ª–æ—Å–æ—Ñ"
        await update.message.reply_text("–†–µ–∂–∏–º: –§—ñ–ª–æ—Å–æ—Ñ ü§î")
        return
    elif user_message in ["–ø–æ—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ñ—à–µ", "–ø—Ä–æ—Å—Ç–∏–π"]:
        context.user_data["mode"] = "–ø—Ä–æ—Å—Ç–∏–π"
        await update.message.reply_text("–†–µ–∂–∏–º: –ü—Ä–æ—Å—Ç–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è üë∂")
        return

    # –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî –∑–≤–∏—á–∞–π–Ω–∏–π)
    mode = context.user_data.get("mode", "–∑–≤–∏—á–∞–π–Ω–∏–π")

    system_prompt = {
        "–∑–≤–∏—á–∞–π–Ω–∏–π": "–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.",
        "–∂–∞—Ä—Ç—ñ–≤–Ω–∏–∫": "–¢–∏ –¥–æ—Ç–µ–ø–Ω–∏–π GPT, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑ –≥—É–º–æ—Ä–æ–º —ñ —Å–∞—Ä–∫–∞–∑–º–æ–º.",
        "—Ñ—ñ–ª–æ—Å–æ—Ñ": "–¢–∏ –≥–ª–∏–±–æ–∫–∏–π –º–∏—Å–ª–∏—Ç–µ–ª—å, —è–∫–∏–π –¥–∞—î –º—É–¥—Ä—ñ —ñ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.",
        "–ø—Ä–æ—Å—Ç–∏–π": "–¢–∏ –ø–æ—è—Å–Ω—é—î—à —Å–∫–ª–∞–¥–Ω—ñ —Ä–µ—á—ñ –¥—É–∂–µ –ø—Ä–æ—Å—Ç–æ, —è–∫ –¥–ª—è 10-—Ä—ñ—á–Ω–æ—ó –¥–∏—Ç–∏–Ω–∏."
    }[mode]

    # GPT-–∑–∞–ø–∏—Ç
    completion = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": update.message.text}
        ]
    )

    reply = completion.choices[0].message.content

    # –ö–Ω–æ–ø–∫–∏
    keyboard = [["–ñ–∞—Ä—Ç", "–§—ñ–ª–æ—Å–æ—Ñ", "–ü–æ—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ñ—à–µ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(reply, reply_markup=reply_markup)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        print("Bot pratsiuie...")
        app.run_polling()
    except Exception as e:
        print(f"Pomylka zapusku: {e}")
