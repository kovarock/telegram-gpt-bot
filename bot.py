import os
import time
import json
import sqlite3
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    CommandHandler, MessageHandler, filters
)
from openai import OpenAI

# ========== .ENV ==========
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# ========== GPT ==========
client = OpenAI(api_key=OPENAI_API_KEY)

# ========== –ó–ú–Ü–ù–ù–Ü ==========
user_data = {}
admin_id = 898106096
user_stats = {}
LOG_FILE = "logs.txt"
DB_FILE = "analytics.db"
MONO_DONATE_LINK = "https://send.monobank.ua/jar/5TCxdr4z1P"

# ========== –î–û–ü–û–ú–Ü–ñ–ù–Ü ==========
def log(text):
    print(text)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(text + "\n")

def get_mode_prompt(mode):
    return {
        "–∑–≤–∏—á–∞–π–Ω–∏–π": "–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.",
        "–∂–∞—Ä—Ç—ñ–≤–Ω–∏–∫": "–¢–∏ –¥–æ—Ç–µ–ø–Ω–∏–π GPT, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑ –≥—É–º–æ—Ä–æ–º —ñ —Å–∞—Ä–∫–∞–∑–º–æ–º.",
        "—Ñ—ñ–ª–æ—Å–æ—Ñ": "–¢–∏ –≥–ª–∏–±–æ–∫–∏–π –º–∏—Å–ª–∏—Ç–µ–ª—å, —è–∫–∏–π –¥–∞—î –º—É–¥—Ä—ñ —ñ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.",
        "–ø—Ä–æ—Å—Ç–∏–π": "–¢–∏ –ø–æ—è—Å–Ω—é—î—à —Å–∫–ª–∞–¥–Ω—ñ —Ä–µ—á—ñ –¥—É–∂–µ –ø—Ä–æ—Å—Ç–æ, —è–∫ –¥–ª—è 10-—Ä—ñ—á–Ω–æ—ó –¥–∏—Ç–∏–Ω–∏."
    }.get(mode, "–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.")

def save_to_db(user_id, name, message):
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS messages (
            user_id INTEGER,
            name TEXT,
            message TEXT,
            timestamp TEXT
        )''')
        cursor.execute("INSERT INTO messages VALUES (?, ?, ?, ?)",
                       (user_id, name, message, datetime.now().isoformat()))
        conn.commit()
        conn.close()
    except Exception as e:
        log(f"DB ERROR: {e}")

# ========== –ö–û–ú–ê–ù–î–ò ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ñ–∞—Ä—Ç", "–§—ñ–ª–æ—Å–æ—Ñ", "–ü–æ—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ñ—à–µ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø GPT-–±–æ—Ç. –ù–∞–ø–∏—à–∏ —â–æ—Å—å ‚Äî —è –≤—ñ–¥–ø–æ–≤—ñ–º ü§ñ",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/mode ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∂–∏–º\n/reset ‚Äî —Å–∫–∏–Ω—É—Ç–∏ —Ä–µ–∂–∏–º\n/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/admin ‚Äî —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞\n/donate ‚Äî –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –±–æ—Ç–∞\n/premium ‚Äî –¥–æ—Å—Ç—É–ø –¥–æ GPT-4")

async def mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º: –∂–∞—Ä—Ç—ñ–≤–Ω–∏–∫ / —Ñ—ñ–ª–æ—Å–æ—Ñ / –ø—Ä–æ—Å—Ç–∏–π")

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_user.id] = {"mode": "–∑–≤–∏—á–∞–π–Ω–∏–π"}
    await update.message.reply_text("–†–µ–∂–∏–º —Å–∫–∏–Ω—É—Ç–æ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ")

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == admin_id:
        await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç, –∞–¥–º—ñ–Ω–µ! –ë–æ—Ç –∂–∏–≤–∏–π —ñ –∑–¥–æ—Ä–æ–≤–∏–π üí™")
    else:
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—É")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    count = len(user_stats)
    total = sum(user_stats.values())
    await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {count}\n–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Ç—ñ–≤: {total}")

async def donate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –≤ Monobank ‚ù§Ô∏è", url=MONO_DONATE_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üíõ –•–æ—á–µ—à –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–≤–∏—Ç–æ–∫ –±–æ—Ç–∞? –ë—É–¥—É –¥—É–∂–µ –≤–¥—è—á–Ω–∏–π –∑–∞ –¥–æ–Ω–∞—Ç!",
        reply_markup=reply_markup
    )

async def premium_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üí∞ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –≤ Monobank", url=MONO_DONATE_LINK),
            InlineKeyboardButton("üì© –ù–∞–ø–∏—Å–∞—Ç–∏ –∞–≤—Ç–æ—Ä—É", url="https://t.me/kovarock")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üíé –•–æ—á–µ—à –¥–æ—Å—Ç—É–ø –¥–æ GPT-4? –ü—ñ–¥—Ç—Ä–∏–º–∞–π –ø—Ä–æ—î–∫—Ç —ñ –Ω–∞–ø–∏—à–∏ –∞–≤—Ç–æ—Ä—É!",
        reply_markup=reply_markup
    )

# ========== –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø ==========
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    name = update.effective_user.first_name
    message = update.message.text.strip()
    
    # –ê–Ω—Ç–∏—Å–ø–∞–º: 3 —Å–µ–∫ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
    now = time.time()
    last = context.user_data.get("last_msg", 0)
    if now - last < 3:
        await update.message.reply_text("–ü–æ–≤—ñ–ª—å–Ω—ñ—à–µ üòâ (—á–µ–∫–∞–π 3 —Å–µ–∫—É–Ω–¥–∏)")
        return
    context.user_data["last_msg"] = now

    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–Ω–æ–ø–∫–∞–º–∏
    lower = message.lower()
    if lower in ["–∂–∞—Ä—Ç", "–∂–∞—Ä—Ç—ñ–≤–Ω–∏–∫"]:
        user_data[uid] = {"mode": "–∂–∞—Ä—Ç—ñ–≤–Ω–∏–∫"}
        await update.message.reply_text("–†–µ–∂–∏–º: –ñ–∞—Ä—Ç—ñ–≤–Ω–∏–∫ ü§™")
        return
    elif lower in ["—Ñ—ñ–ª–æ—Å–æ—Ñ"]:
        user_data[uid] = {"mode": "—Ñ—ñ–ª–æ—Å–æ—Ñ"}
        await update.message.reply_text("–†–µ–∂–∏–º: –§—ñ–ª–æ—Å–æ—Ñ ü§î")
        return
    elif lower in ["–ø–æ—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ñ—à–µ", "–ø—Ä–æ—Å—Ç–∏–π"]:
        user_data[uid] = {"mode": "–ø—Ä–æ—Å—Ç–∏–π"}
        await update.message.reply_text("–†–µ–∂–∏–º: –ü—Ä–æ—Å—Ç–∏–π üë∂")
        return

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É
    log(f"[{uid}] {name}: {message}")
    save_to_db(uid, name, message)

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É
    mode = user_data.get(uid, {}).get("mode", "–∑–≤–∏—á–∞–π–Ω–∏–π")
    prompt = get_mode_prompt(mode)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    user_stats[uid] = user_stats.get(uid, 0) + 1

    # GPT: –º–æ–¥–µ–ª—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    model_name = "gpt-4o" if uid == admin_id else "gpt-3.5-turbo"

    try:
        completion = client.chat.completions.create(
            model=model_name,
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": message}
            ]
        )
        reply = completion.choices[0].message.content

        if uid != admin_id:
            reply += "\n\n‚ö†Ô∏è –¶–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT-3.5. –î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ GPT-4 ‚Äî –Ω–∞–ø–∏—à–∏ /premium"

        keyboard = [["–ñ–∞—Ä—Ç", "–§—ñ–ª–æ—Å–æ—Ñ", "–ü–æ—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ñ—à–µ"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(reply, reply_markup=reply_markup)
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ GPT")
        log(f"GPT ERROR: {e}")

# ========== –ó–ê–ü–£–°–ö ==========
if __name__ == "__main__":
    try:
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("mode", mode_command))
        app.add_handler(CommandHandler("reset", reset_command))
        app.add_handler(CommandHandler("admin", admin_command))
        app.add_handler(CommandHandler("stats", stats_command))
        app.add_handler(CommandHandler("donate", donate_command))
        app.add_handler(CommandHandler("premium", premium_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        print("Bot pratsiuie... (gpt-4 for admin, gpt-3.5 for public)")
        app.run_polling()
    except Exception as e:
        log(f"LAUNCH ERROR: {e}")